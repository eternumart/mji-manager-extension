import fs from "fs";
import path from "path";
import archiver from "archiver";

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const extractPath = args[0] || "C:\\Program Files\\mji-manager"; // –ü—É—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é C:\Extension)
const iconPath = args[1] || "../public/ico512.png"; // –ò–∫–æ–Ω–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é default-icon.ico)

const buildDir = path.join(__dirname, "../build");
const outputFile = path.join(__dirname, "../MJI-manager.zip");

console.log("üì¶ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞...");
console.log(`üõ†Ô∏è –ü—É—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: ${extractPath}`);
console.log(`üé® –ò–∫–æ–Ω–∫–∞: ${iconPath}`);

const output = fs.createWriteStream(outputFile);
const archive = archiver("zip", { zlib: { level: 9 } });

output.on("close", () => {
  console.log(`‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${outputFile} (${archive.pointer()} –±–∞–π—Ç)`);
});

output.on("error", (err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—Ä—Ö–∏–≤–∞:", err);
});

archive.on("error", (err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:", err);
});

archive.pipe(output);
archive.directory(buildDir, false);
archive.finalize();

// ‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É:
// npm run build && ts-node scripts/create-self-extract.ts "C:\\MyExtension" "my-icon.ico"
