import { apiConfig } from "../apiConfig";
import { saveToCache } from "../components/Extention/utils/saveToCache";
import { decodeToken } from "../components/Extention/utils/decodeToken";

console.log("DOMEvaluator.ts loaded");

export let baseUrl = `${apiConfig.address.protocol}${apiConfig.address.ip}`; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä Prod
let isLoading = false;
const loadingFlags = new Map<string, boolean>();

chrome.runtime.onMessage.addListener(async (request, sender, sendResponse) => {
	switch (request.contentScriptQuery) {
		case "activate-request": {
			if (!request.data.login || !request.data.password || !request.data.key) {
				console.error("‚ùå –ü–æ–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
				return;
			}
			console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω:", request.data);
			activation(request);
			break;
		}
		case "logIn-request": {
			login(request).then((response) => {
				console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º logIn-response...");
				console.log(response);
				const decoded = decodeToken(response.accessToken);
				if (decoded) {
					response.fio = decoded.fio;
					response.login = decoded.login;
				}
				console.log("decoded token: ", decoded.fio, decoded.login);
				chrome.runtime.sendMessage({
					contentScriptQuery: "logIn-response",
					data: [response, decoded.login],
				});
			});
			return;
		}
		case "setUsid-request": {
			setUsid(request);
			break;
		}
		case "savefio-request": {
			saveFio(request);
			console.log("savefio-request");
			break;
		}
		case "appData-request": {
			await appData(request);
			break;
		}
		case "checkusid-request": {
			checkUsid(request);
			break;
		}
		case "enviromentSwitch-request": {
			console.log(`üõ† –ó–∞–ø—Ä–æ—Å—ã –ø–æ–π–¥—É—Ç –Ω–∞ ${request.enviroment} —Å–µ—Ä–≤–µ—Ä.`);
			baseUrl = request.baseUrl;
			checkResponseFromServer(request);
			break;
		}
		case "app-loaded-response": {
			baseUrl = request.baseUrl;
			break;
		}
		case "enviroment-check-request": {
			console.log("enviroment-check-request");
			getCurrentEnviroment();
			break;
		}
		case "logOut-request": {
			console.log("üî¥ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥");

			chrome.storage.local.clear(() => {
				console.log("‚úÖ –ö–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.");
			});

			sendResponse({ success: true });
			return true;
		}
	}
});

async function fetchWithRetryAndCache(url: string, options: RequestInit, retries: number = 1, useCache: boolean = false): Promise<any> {
	if (loadingFlags.get(url)) {
		return;
	}

	loadingFlags.set(url, true);
	isLoading = true;

	for (let i = 0; i < retries; i++) {
		try {
			console.info(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É ‚Ññ${i + 1} –ø–æ URL ${url}`);
			const controller = new AbortController();
			const timeout = setTimeout(() => controller.abort(), 5000); // ‚è≥ 5 —Å–µ–∫—É–Ω–¥

			const response = await fetch(url, { ...options, signal: controller.signal });

			clearTimeout(timeout);

			if (!response.ok) {
				chrome.runtime.sendMessage({
					contentScriptQuery: "Error-response",
					error: "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}",
				});
			}
			const data = await response.json();

			loadingFlags.set(url, false);
			isLoading = false;

			if (retries === 3) {
				console.log("4! üì¶ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
			}
			if (retries === 5) {
				console.log("9! üì¶ –°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
			}
			return data;
		} catch (error) {
			chrome.runtime.sendMessage({
				contentScriptQuery: "Error-response",
				error: `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ #${i + 1} –∏–∑ ${retries} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞`,
			});
			if (i === retries - 1) {
				if (useCache) {
					const cachedData = await new Promise((resolve) => {
						chrome.storage.local.get([url], (result) => {
							resolve(result[url] || null);
						});
					});

					if (cachedData) {
						loadingFlags.set(url, false);
						isLoading = false;

						chrome.runtime.sendMessage({
							contentScriptQuery: "Error-response",
							error: "‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
						});
						return cachedData;
					}
					chrome.runtime.sendMessage({
						contentScriptQuery: "Error-response",
						error: "‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –î–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
					});
				} else {
					chrome.runtime.sendMessage({
						contentScriptQuery: "Error-response",
						error: "‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.",
					});
				}
			}
		}
	}
}

async function getCurrentEnviroment() {
	chrome.runtime.sendMessage({
		contentScriptQuery: "enviroment-check-response",
		enviroment: baseUrl,
	});
}

async function checkResponseFromServer(request: any) {
	console.log("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ DOMEvaluator.ts");
	try {
		const url = `${baseUrl}${apiConfig.routes.api.checResponseFromServer}`;

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
		await fetchWithRetryAndCache(url, {
			method: "GET",
			headers: { "Content-Type": "application/json" },
		}).then((res) => {
			console.log(`üü¢ –°–µ—Ä–≤–µ—Ä ${request.enviroment} –¥–æ—Å—Ç—É–ø–µ–Ω`);
			baseUrl = request.baseUrl;
		});
	} catch (error) {
		console.error(`üî¥ –°–µ—Ä–≤–µ—Ä ${request.enviroment} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`, error);
	}
}

async function activation(request: any) {
	console.log("‚è≥ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...");
	const url = `${baseUrl}${apiConfig.routes.api.activation}`;

	try {
		// ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		const data = await fetchWithRetryAndCache(url, {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({
				login: request.data.login,
				password: request.data.password,
				key: request.data.key,
			}),
		});

		console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", data);

		// ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ `activateForm.tsx`
		chrome.runtime.sendMessage({
			contentScriptQuery: "activate-response", // üî• –ó–¥–µ—Å—å –±—ã–ª–æ "activation-response"
			data,
		});
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", error);
		chrome.runtime.sendMessage({
			contentScriptQuery: "activate-response",
			error: "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
		});
	}
}

async function login(request: any) {
	const url = `${baseUrl}${apiConfig.routes.api.login}`;

	try {
		const data = await fetchWithRetryAndCache(
			url,
			{
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ data: request.data }),
			},
			3, // 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
			true
		);

		return data;
	} catch (error) {
		chrome.runtime.sendMessage({
			contentScriptQuery: "Error-response",
			error: error,
			flow: "logIn",
		});
		return { success: false, error: error };
	}
}

async function saveFio(request: any) {
	const url = `${baseUrl}${apiConfig.routes.api.saveFio}`;
	try {
		const data = await fetchWithRetryAndCache(url, {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ data: request.data }),
		});
		chrome.runtime.sendMessage({ data, contentScriptQuery: "savefio-response" });
	} catch (error) {
		chrome.runtime.sendMessage({
			contentScriptQuery: "Error-response",
			error: error,
			flow: "savefio",
		});
	}
}

async function appData(request: any) {
	console.log("8! ‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.");
	const url = `${baseUrl}${apiConfig.routes.api.getAppData}`;

	try {
		const data = await fetchWithRetryAndCache(
			url,
			{
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ data: request.data }),
			},
			5, // 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
			true
		);

		console.log("10! ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à...");

		// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `chrome.storage.local` –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		await new Promise<void>((resolve) => {
			chrome.storage.local.set({ [baseUrl]: data }, () => {
				console.log("üì¶ ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ chrome.storage.local");
				resolve(); // üî• –¢–µ–ø–µ—Ä—å –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
			});
		});

		// ‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ `chrome.storage.local`
		chrome.storage.local.get(baseUrl, (result) => {
			if (result[baseUrl] && Object.keys(result[baseUrl]).length > 0) {
				console.log("üì¶ ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞:", result[baseUrl]);
				chrome.runtime.sendMessage({
					contentScriptQuery: "appData-response",
					data: result[baseUrl], // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
				});
			} else {
				console.log("‚ö†Ô∏è ‚ùå –î–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ!");
			}
		});
	} catch (error) {
		console.log("10.1! ‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–µ—à–∞...");

		// ‚úÖ –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞
		chrome.storage.local.get(baseUrl, (result) => {
			if (result[baseUrl] && Object.keys(result[baseUrl]).length > 0) {
				console.log("üì¶ ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞.");
				chrome.runtime.sendMessage({
					contentScriptQuery: "appData-response",
					data: result[baseUrl],
				});
			} else {
				console.log("‚ö†Ô∏è ‚ùå –î–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ –Ω–µ—Ç!");
			}
		});

		chrome.runtime.sendMessage({
			contentScriptQuery: "Error-response",
			error: error,
			flow: "appData",
		});
	}
}

async function setUsid(request: any) {
	fetch(`${request.url}`, {
		method: "POST",
		headers: {
			"Content-Type": "application/json;charset=utf-8",
		},
		body: JSON.stringify({ data: request.data }),
	})
		.then(checkResponse)
		.then((res) => {
			chrome.runtime.sendMessage(res);
		});
	return true;
}

async function checkUsid(request: any) {
	await fetch(`${request.url}`, {
		method: "POST",
		headers: {
			"Content-Type": "application/json;charset=utf-8",
		},
		body: JSON.stringify({ data: request.data }),
	})
		.then(checkResponse)
		.then((res) => {
			chrome.runtime.sendMessage(res);
		});
}

function checkResponse(res: any) {
	if (res.ok) {
		return res.json();
	}
	return Promise.reject(res);
}

export {};
