/**
 * üî• –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT-—Ç–æ–∫–µ–Ω–∞
 * @param token - JWT-—Ç–æ–∫–µ–Ω
 * @returns –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ `null`, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
 */
export function decodeToken(token: string) {
    try {
        if (!token || typeof token !== "string") {
            console.warn("‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω");
            return null;
        }

        const base64Payload = token.split(".")[1];
        if (!base64Payload) throw new Error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞");

        // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º `Base64` (–∑–∞–º–µ–Ω—è–µ–º `-` –Ω–∞ `+` –∏ `_` –Ω–∞ `/`)
        const decodedPayload = decodeURIComponent(escape(atob(base64Payload.replace(/-/g, "+").replace(/_/g, "/"))));
        return JSON.parse(decodedPayload);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
        return null;
    }
}
