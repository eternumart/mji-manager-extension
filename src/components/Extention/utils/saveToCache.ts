export const saveToCache = async (key: string, data: any) => {
	const finalObject = {
		currentFio: "",
		currentLogin: "",
		loginIsPossible: "",
		appData: {},
	};

	try {
		const cachedData: any = await new Promise((resolve) => {
			chrome.storage.local.get([key], (result) => {
				resolve(result[key] || {});
			});
		});

		// –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
		if (cachedData.currentFio) {
			finalObject.currentFio = cachedData.currentFio;
			finalObject.currentLogin = cachedData.currentLogin;
			finalObject.loginIsPossible = cachedData.loginIsPossible;
		}
		if (cachedData.appData) {
			finalObject.appData = cachedData.appData;
		}

		// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
		if (data.fio) {
			finalObject.currentFio = data.fio;
			finalObject.currentLogin = data.login;
			finalObject.loginIsPossible = data.loginIsPossible;
		}
		if (!data.fio) {
			finalObject.appData = data;
		}

		console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ chrome.storage.local (–∫–ª—é—á: ${key})`, finalObject);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ `chrome.storage.local`
		chrome.storage.local.set({ [key]: finalObject }, () => {
			if (chrome.runtime.lastError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ chrome.storage:", chrome.runtime.lastError);
			} else {
				console.log("8! ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ chrome.storage.");
			}
		});
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ chrome.storage:", error);
	}
};
